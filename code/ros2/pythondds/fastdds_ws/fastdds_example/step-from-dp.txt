I'll show you a complete Fast DDS example in Python with step-by-step explanation. Note that Fast DDS primarily supports C++, but we can use it in Python through bindings or alternative approaches.
Important Note

Fast DDS doesn't have official Python bindings, but we can use:

    Fast DDS Python bindings (community project)

    ROS2 with rclpy (which uses Fast DDS underneath)

    Cyclone DDS Python bindings (similar DDS implementation)

I'll show option 1 using the Fast DDS Python wrapper and option 2 using ROS2.
Option 1: Using Fast DDS Python Wrapper
Step 1: Installation
bash

# Install Fast DDS Python wrapper
pip install fastdds

# Or build from source (if needed)
git clone https://github.com/eProsima/Fast-DDS-python-wrapper.git
cd Fast-DDS-python-wrapper
pip install .

Step 2: Create IDL File (Data Definition)

HelloWorld.idl:
idl

struct HelloWorld
{
    unsigned long index;
    string message;
};

Step 3: Generate Python Code from IDL
bash

# Generate Python classes from IDL
fastddsgen -example python HelloWorld.idl

This generates HelloWorld.py with data types.
Step 4: Implement Publisher

publisher.py:
python

import time
import HelloWorld
import FastDDS

class HelloWorldPublisher:
    def __init__(self):
        # Create DomainParticipant
        self.participant = FastDDS.DomainParticipant(0)
        
        # Register Type
        self.type = HelloWorld.HelloWorldPubSubType()
        self.type.setName("HelloWorld")
        self.participant.registerType(self.type)
        
        # Create Publisher
        self.publisher = self.participant.createPublisher(
            FastDDS.PUBLISHER_QOS_DEFAULT)
        
        # Create Topic
        self.topic = self.participant.createTopic(
            "HelloWorldTopic", "HelloWorld")
        
        # Create DataWriter
        self.writer = self.publisher.createDataWriter(
            self.topic, FastDDS.DATAWRITER_QOS_DEFAULT)
        
        # Create data instance
        self.hello = HelloWorld.HelloWorld()
        self.hello.index = 0
        
        print("Publisher created successfully!")
    
    def publish_message(self, message):
        """Publish a message"""
        self.hello.index += 1
        self.hello.message = message
        
        # Publish the data
        self.writer.write(self.hello)
        print(f"Published: [{self.hello.index}] {self.hello.message}")
    
    def run(self, num_messages=10):
        """Run publisher"""
        for i in range(num_messages):
            self.publish_message(f"Hello from Python! Message #{i+1}")
            time.sleep(1)
        
        print("Publisher finished!")
    
    def __del__(self):
        # Cleanup
        if hasattr(self, 'participant'):
            self.participant.delete_contained_entities()

if __name__ == "__main__":
    publisher = HelloWorldPublisher()
    publisher.run()

Step 5: Implement Subscriber

subscriber.py:
python

import HelloWorld
import FastDDS

class HelloWorldSubscriber:
    def __init__(self):
        # Create DomainParticipant
        self.participant = FastDDS.DomainParticipant(0)
        
        # Register Type
        self.type = HelloWorld.HelloWorldPubSubType()
        self.type.setName("HelloWorld")
        self.participant.registerType(self.type)
        
        # Create Subscriber
        self.subscriber = self.participant.createSubscriber(
            FastDDS.SUBSCRIBER_QOS_DEFAULT)
        
        # Create Topic
        self.topic = self.participant.createTopic(
            "HelloWorldTopic", "HelloWorld")
        
        # Create DataReader with listener
        self.listener = HelloWorldListener()
        self.reader = self.subscriber.createDataReader(
            self.topic, FastDDS.DATAREADER_QOS_DEFAULT, self.listener)
        
        print("Subscriber created successfully! Waiting for messages...")
    
    def run(self):
        """Run subscriber"""
        try:
            # Keep the subscriber running
            while True:
                pass
        except KeyboardInterrupt:
            print("\nSubscriber stopped!")
    
    def __del__(self):
        # Cleanup
        if hasattr(self, 'participant'):
            self.participant.delete_contained_entities()

class HelloWorldListener(FastDDS.DataReaderListener):
    def __init__(self):
        super().__init__()
    
    def on_data_available(self, reader):
        """Called when new data is available"""
        info = FastDDS.SampleInfo()
        data = HelloWorld.HelloWorld()
        
        if reader.takeNextSample(data, info) == FastDDS.RETCODE_OK:
            if info.valid_data:
                print(f"Received: [{data.index}] {data.message}")

if __name__ == "__main__":
    subscriber = HelloWorldSubscriber()
    subscriber.run()

Option 2: Using ROS2 with rclpy (Recommended)

Since Fast DDS Python bindings can be tricky, here's a more practical approach using ROS2 which uses Fast DDS underneath:
Step 1: Install ROS2
bash

# Install ROS2 (Ubuntu)
sudo apt update
sudo apt install ros-humble-desktop
source /opt/ros/humble/setup.bash

Step 2: Create ROS2 Package
bash

# Create workspace
mkdir -p fastdds_ws/src
cd fastdds_ws/src

# Create package
ros2 pkg create fastdds_example --build-type ament_python

Step 3: Create Publisher Node

fastdds_example/fastdds_example/publisher_node.py:
python

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import time

class FastDDSPublisher(Node):
    def __init__(self):
        super().__init__('fastdds_publisher')
        
        # Create publisher (uses Fast DDS underneath)
        self.publisher = self.create_publisher(String, 'fastdds_topic', 10)
        
        # Timer to publish messages
        self.timer = self.create_timer(1.0, self.timer_callback)
        self.count = 0
        
        self.get_logger().info('Fast DDS Publisher started!')
    
    def timer_callback(self):
        """Publish message every second"""
        msg = String()
        msg.data = f'Hello from Fast DDS! Message #{self.count}'
        
        self.publisher.publish(msg)
        self.get_logger().info(f'Published: "{msg.data}"')
        self.count += 1

def main(args=None):
    rclpy.init(args=args)
    publisher = FastDDSPublisher()
    
    try:
        rclpy.spin(publisher)
    except KeyboardInterrupt:
        pass
    finally:
        publisher.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

Step 4: Create Subscriber Node

fastdds_example/fastdds_example/subscriber_node.py:
python

import rclpy
from rclpy.node import Node
from std_msgs.msg import String

class FastDDSSubscriber(Node):
    def __init__(self):
        super().__init__('fastdds_subscriber')
        
        # Create subscriber (uses Fast DDS underneath)
        self.subscription = self.create_subscription(
            String,
            'fastdds_topic',
            self.listener_callback,
            10)
        
        self.get_logger().info('Fast DDS Subscriber started! Waiting for messages...')
    
    def listener_callback(self, msg):
        """Callback when message is received"""
        self.get_logger().info(f'Received: "{msg.data}"')

def main(args=None):
    rclpy.init(args=args)
    subscriber = FastDDSSubscriber()
    
    try:
        rclpy.spin(subscriber)
    except KeyboardInterrupt:
        pass
    finally:
        subscriber.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

Step 5: Setup Package Files

setup.py:
python

from setuptools import setup
import os
from glob import glob

package_name = 'fastdds_example'

setup(
    name=package_name,
    version='0.0.0',
    packages=[package_name],
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name), glob('launch/*.launch.py'))
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='your_name',
    maintainer_email='your_email@example.com',
    description='Fast DDS Python example using ROS2',
    license='Apache License 2.0',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'publisher = fastdds_example.publisher_node:main',
            'subscriber = fastdds_example.subscriber_node:main',
        ],
    },
)

package.xml:
xml

<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schemaType="schema"?>
<package format="3">
  <name>fastdds_example</name>
  <version>0.0.0</version>
  <description>Fast DDS Python example using ROS2</description>
  <maintainer email="your_email@example.com">Your Name</maintainer>
  <license>Apache License 2.0</license>

  <exec_depend>rclpy</exec_depend>
  <exec_depend>std_msgs</exec_depend>

  <test_depend>ament_copyright</test_depend>
  <test_depend>ament_flake8</test_depend>
  <test_depend>ament_pep257</test_depend>
  <test_depend>python3-pytest</test_depend>

  <export>
    <build_type>ament_python</build_type>
  </export>
</package>

Step 6: Build and Run
bash

# Build the package
cd fastdds_ws
colcon build --packages-select fastdds_example
source install/setup.bash

# Terminal 1: Run publisher
ros2 run fastdds_example publisher

# Terminal 2: Run subscriber
ros2 run fastdds_example subscriber

Step-by-Step Explanation
1. Fast DDS Concepts

    DomainParticipant: Entry point to the DDS domain

    Publisher/Subscriber: Manage data writers/readers

    Topic: Named data channel with specific type

    DataWriter/DataReader: Actually send/receive data

    QoS Policies: Quality of Service configurations

2. Key Features Demonstrated

    Discovery: Automatic discovery of publishers/subscribers

    Pub/Sub Pattern: Decoupled communication

    Type Safety: Strongly typed data exchange

    Real-time: Low latency communication

3. Why ROS2 Approach is Better

    Stable Python support: Official rclpy library

    Easier setup: No need for IDL compilation

    Ecosystem: Access to ROS2 tools and utilities

    Production ready: Well-tested and documented

4. Performance Considerations

    Fast DDS is optimized for low latency and high throughput

    Suitable for real-time systems and robotics

    Configurable QoS policies for different use cases

The ROS2 approach is recommended because it provides a stable, well-documented way to use Fast DDS in Python while abstracting away the complexity of direct DDS usage.


Alternative: Run Without Building (Development Mode)

If you want to run without building each time:
bash

# Terminal 1 - Run publisher directly
cd ~/fastdds_ws/src/fastdds_example/fastdds_example
python3 publisher_node.py

# Terminal 2 - Run subscriber directly
cd ~/fastdds_ws/src/fastdds_example/fastdds_example
python3 subscriber_node.py