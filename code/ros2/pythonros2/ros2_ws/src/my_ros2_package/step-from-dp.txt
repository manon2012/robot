Here's a complete Python ROS2 example with a publisher and subscriber, explained step by step:
Project Structure
text

ros2_example/
├── src/
│   └── my_ros2_package/
        └── launch/
│           └── example_launch.py
│       ├── package.xml
│       ├── setup.py
│       ├── setup.cfg
│       └── my_ros2_package/
│           ├── __init__.py
│           ├── publisher_node.py
│           ├── subscriber_node.py
│       

Step 1: Create ROS2 Workspace and Package
bash

# Create workspace directory
mkdir -p ~/ros2_ws/src
cd ~/ros2_ws/src

# Create ROS2 package
ros2 pkg create my_ros2_package --build-type ament_python --dependencies rclpy std_msgs

Step 2: Package Configuration Files

package.xml (auto-generated, add description):
xml

<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>my_ros2_package</name>
  <version>0.0.0</version>
  <description>A simple ROS2 Python example package</description>
  <maintainer email="your.email@example.com">Your Name</maintainer>
  <license>Apache License 2.0</license>

  <depend>rclpy</depend>
  <depend>std_msgs</depend>
  
  <test_depend>ament_copyright</test_depend>
  <test_depend>ament_flake8</test_depend>
  <test_depend>ament_pep257</test_depend>
  <test_depend>python3-pytest</test_depend>

  <export>
    <build_type>ament_python</build_type>
  </export>
</package>

setup.py (configure entry points):
python

from setuptools import setup
import os
from glob import glob

package_name = 'my_ros2_package'

setup(
    name=package_name,
    version='0.0.0',
    packages=[package_name],
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name, 'launch'), glob('launch/*.py')),
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='Your Name',
    maintainer_email='your.email@example.com',
    description='A simple ROS2 Python example package',
    license='Apache License 2.0',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'publisher_node = my_ros2_package.publisher_node:main',
            'subscriber_node = my_ros2_package.subscriber_node:main',
        ],
    },
)

Step 3: Publisher Node

publisher_node.py:
python

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import time

class SimplePublisher(Node):
    """
    A simple ROS2 publisher node that sends messages periodically
    """
    def __init__(self):
        super().__init__('simple_publisher')  # Node name
        
        # Create publisher for String messages on topic 'chatter'
        self.publisher_ = self.create_publisher(String, 'chatter', 10)
        
        # Create timer to publish messages every 1 second
        timer_period = 1.0  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        
        self.counter = 0
        self.get_logger().info('Publisher node started!')

    def timer_callback(self):
        """
        Callback function called by the timer
        """
        # Create a new message
        msg = String()
        msg.data = f'Hello ROS2! Message #{self.counter}'
        
        # Publish the message
        self.publisher_.publish(msg)
        
        # Log the publication
        self.get_logger().info(f'Publishing: "{msg.data}"')
        
        self.counter += 1

def main(args=None):
    """
    Main function to initialize and run the publisher node
    """
    # Initialize ROS2 Python client library
    rclpy.init(args=args)
    
    # Create the publisher node
    publisher_node = SimplePublisher()
    
    try:
        # Keep the node running until interrupted
        rclpy.spin(publisher_node)
    except KeyboardInterrupt:
        # Handle Ctrl+C gracefully
        pass
    finally:
        # Cleanup
        publisher_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

Step 4: Subscriber Node

subscriber_node.py:
python

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String

class SimpleSubscriber(Node):
    """
    A simple ROS2 subscriber node that receives messages
    """
    def __init__(self):
        super().__init__('simple_subscriber')  # Node name
        
        # Create subscriber for String messages on topic 'chatter'
        self.subscription = self.create_subscription(
            String,
            'chatter',
            self.listener_callback,
            10  # Queue size
        )
        
        # Prevent unused variable warning
        self.subscription
        
        self.get_logger().info('Subscriber node started! Waiting for messages...')

    def listener_callback(self, msg):
        """
        Callback function called when a message is received
        """
        self.get_logger().info(f'I heard: "{msg.data}"')

def main(args=None):
    """
    Main function to initialize and run the subscriber node
    """
    # Initialize ROS2 Python client library
    rclpy.init(args=args)
    
    # Create the subscriber node
    subscriber_node = SimpleSubscriber()
    
    try:
        # Keep the node running until interrupted
        rclpy.spin(subscriber_node)
    except KeyboardInterrupt:
        # Handle Ctrl+C gracefully
        pass
    finally:
        # Cleanup
        subscriber_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

Step 5: Launch File

launch/example_launch.py:
python

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    """
    Generate a launch description that starts both publisher and subscriber nodes
    """
    return LaunchDescription([
        # Publisher node
        Node(
            package='my_ros2_package',
            executable='publisher_node',
            name='publisher',
            output='screen',
            emulate_tty=True,
        ),
        
        # Subscriber node
        Node(
            package='my_ros2_package',
            executable='subscriber_node',
            name='subscriber',
            output='screen',
            emulate_tty=True,
        ),
    ])

Step 6: Build the Package
bash

# Navigate to workspace root
cd ~/ros2_ws

# Build the package (colcon is ROS2 build tool)
colcon build --packages-select my_ros2_package

# Source the setup file to make package available
source install/setup.bash

Step 7: Run the Example

Option 1: Run nodes individually:
bash

# Terminal 1 - Run publisher
ros2 run my_ros2_package publisher_node

# Terminal 2 - Run subscriber
ros2 run my_ros2_package subscriber_node

Option 2: Use the launch file:
bash

# Run both nodes together
ros2 launch my_ros2_package example_launch.py

Option 3: Manual testing with command line:
bash

# Listen to messages on the chatter topic
ros2 topic echo /chatter

# See active nodes
ros2 node list

# See active topics
ros2 topic list

# See topic info
ros2 topic info /chatter

Key Concepts Explained:

    Nodes: Independent processes (publisher and subscriber)

    Topics: Named buses for message passing (chatter)

    Messages: Data structures (std_msgs/String)

    rclpy: ROS2 Python client library

    Launch Files: Configure and start multiple nodes

    Package: Container for ROS2 code with package.xml and setup.py

This example demonstrates the fundamental ROS2 concepts: creating nodes, publishing/subscribing to topics, and using launch files. The publisher sends messages every second, and the subscriber receives and logs them.